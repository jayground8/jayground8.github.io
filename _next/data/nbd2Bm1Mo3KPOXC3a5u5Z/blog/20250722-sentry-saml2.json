{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var c=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var r=t=>i(t,\"__esModule\",{value:!0});var p=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),g=(t,n)=>{r(t);for(var s in n)i(t,s,{get:n[s],enumerable:!0})},y=(t,n,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of h(n))!u.call(t,a)&&a!==\"default\"&&i(t,a,{get:()=>n[a],enumerable:!(s=d(n,a))||s.enumerable});return t},k=t=>y(r(i(t!=null?c(m(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var l=p((v,o)=>{o.exports=_jsx_runtime});var b={};g(b,{default:()=>N,frontmatter:()=>f});var e=k(l()),f={title:\"Configuring Sentry's SAML2 Provider with Keycloak\",date:\"2025-07-22\",tags:[\"sentry\",\"keycloak\",\"saml2\"],images:[\"/static/images/thumbnail/sentry-saml2-keycloak.png\"],summary:\"This time, I integrated Sentry with Keycloak. There are several helpful blog posts available that make the process easy to follow. However, out of curiosity, I wanted to understand exactly what was happening behind the scenes\\u2014and clarify which steps are truly necessary.\"};function S(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(s,{})})):s();function s(){let a=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",span:\"span\",h2:\"h2\",a:\"a\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(a.p,{children:\"When using Keycloak as your Identity Provider, you can configure SAML2 to authenticate Sentry. The official Sentry documentation provides detailed instructions on how to set up a custom SAML provider. You can find the URL formats for the Assertion Consumer Service (ACS), Single Logout Service (SLS), and metadata endpoints in the documentation, such as:\"}),(0,e.jsx)(a.pre,{className:\"language-bash\",children:(0,e.jsxs)(a.code,{className:\"language-bash code-highlight\",children:[(0,e.jsx)(a.span,{className:\"code-line\",children:`ACS: https://sentry.io/saml/acs/YOUR_ORG_SLUG/\n`}),(0,e.jsx)(a.span,{className:\"code-line\",children:`SLS: https://sentry.io/saml/sls/YOUR_ORG_SLUG/\n`}),(0,e.jsx)(a.span,{className:\"code-line\",children:`Metadata: https://sentry.io/saml/metadata/YOUR_ORG_SLUG/\n`})]})}),(0,e.jsx)(a.p,{children:\"To fill in your organization slug, you can find the value on the Sentry Settings page.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-org-slug.png\",alt:\"an organization slug on settings\"}),(0,e.jsxs)(a.h2,{id:\"set-up-keylocak\",children:[(0,e.jsx)(a.a,{href:\"#set-up-keylocak\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(a.span,{className:\"icon icon-link\"})}),\"Set Up Keylocak\"]}),(0,e.jsxs)(a.p,{children:[\"Now, let\\u2019s create a client in Keycloak. Suppose your self-hosted Sentry URL is \",(0,e.jsx)(a.a,{href:\"https://sentry.jayground8.com\",children:\"https://sentry.jayground8.com\"}),\" and your organization slug is sentry. Then, the client ID for the SAML2 client in Sentry should look like the following:\"]}),(0,e.jsx)(a.pre,{className:\"language-bash\",children:(0,e.jsx)(a.code,{className:\"language-bash code-highlight\",children:(0,e.jsx)(a.span,{className:\"code-line\",children:`https://sentry.jayground8.com/saml/metadata/sentry/\n`})})}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-keycloak-client.png\",alt:\"creating a client on Keycloak\"}),(0,e.jsxs)(a.p,{children:[\"why? when Sentry redirect to Keycloak, it provide SAMLRequest Information with query params. \",(0,e.jsx)(a.code,{children:\"<saml:Issuer>\"}),\" should match with Sentry Metadata(Entity ID). The client ID of SAML2 in Keycloak is used in \",(0,e.jsx)(a.code,{children:\"<saml:Issuer>\"}),\". You will receive an \\u201Cinvalid request\\u201D error from Keycloak if this value is not set correctly.\"]}),(0,e.jsx)(a.pre,{className:\"language-xml\",children:(0,e.jsxs)(a.code,{className:\"code-highlight language-xml\",children:[(0,e.jsxs)(a.span,{className:\"code-line\",children:[(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsx)(a.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(a.span,{className:\"token namespace\",children:\"samlp:\"}),\"AuthnRequest\"]}),\" \",(0,e.jsx)(a.span,{className:\"token attr-name\",children:\"...\"}),(0,e.jsx)(a.span,{className:\"token punctuation\",children:\">\"})]}),`\n`]}),(0,e.jsxs)(a.span,{className:\"code-line\",children:[\"  \",(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsx)(a.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(a.span,{className:\"token namespace\",children:\"saml:\"}),\"Issuer\"]}),\" \",(0,e.jsxs)(a.span,{className:\"token attr-name\",children:[(0,e.jsx)(a.span,{className:\"token namespace\",children:\"xmlns:\"}),\"saml\"]}),(0,e.jsxs)(a.span,{className:\"token attr-value\",children:[(0,e.jsx)(a.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,e.jsx)(a.span,{className:\"token punctuation\",children:'\"'}),\"urn:oasis:names:tc:SAML:2.0:assertion\",(0,e.jsx)(a.span,{className:\"token punctuation\",children:'\"'})]}),(0,e.jsx)(a.span,{className:\"token punctuation\",children:\">\"})]}),`\n`]}),(0,e.jsx)(a.span,{className:\"code-line\",children:`    https://sentry.jayground8.com/saml/metadata/sentry/\n`}),(0,e.jsxs)(a.span,{className:\"code-line\",children:[\"  \",(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsx)(a.span,{className:\"token punctuation\",children:\"</\"}),(0,e.jsx)(a.span,{className:\"token namespace\",children:\"saml:\"}),\"Issuer\"]}),(0,e.jsx)(a.span,{className:\"token punctuation\",children:\">\"})]}),`\n`]}),(0,e.jsx)(a.span,{className:\"code-line\",children:`  ...\n`}),(0,e.jsxs)(a.span,{className:\"code-line\",children:[(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsxs)(a.span,{className:\"token tag\",children:[(0,e.jsx)(a.span,{className:\"token punctuation\",children:\"</\"}),(0,e.jsx)(a.span,{className:\"token namespace\",children:\"samlp:\"}),\"AuthnRequest\"]}),(0,e.jsx)(a.span,{className:\"token punctuation\",children:\">\"})]}),`\n`]})]})}),(0,e.jsx)(a.p,{children:\"Some blogs suggest manually setting the ACS and SLS URLs in the Keycloak client\\u2019s advanced settings. However, this is not necessary, as the metadata (Entity ID) already provides those URLs.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-advanced-settings.png\",alt:\"Keycloak client's advanced settings\"}),(0,e.jsx)(a.p,{children:\"Next, add the Valid Redirect URIs, and complete the client creation by clicking the Save button.\"}),(0,e.jsx)(a.pre,{className:\"language-bash\",children:(0,e.jsx)(a.code,{className:\"language-bash code-highlight\",children:(0,e.jsx)(a.span,{className:\"code-line\",children:`https://sentry.jayground8.com/*\n`})})}),(0,e.jsx)(a.p,{children:\"Now, you need to configure a few more settings. First, create a Client Scope to pass the user\\u2019s email information to Sentry.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-keycloak-client-scope.png\",alt:\"add new client scope\"}),(0,e.jsx)(a.p,{children:\"After creating the client scope, add predefined mappers to map the Keycloak user\\u2019s email to a SAML attribute.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-mapper.png\",alt:\"add new mapper\"}),(0,e.jsx)(a.p,{children:\"The SAML attribute name is important because you\\u2019ll later need to tell Sentry which SAML attributes to use for their user ID and email.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-mapper-detail.png\",alt:\"set a attribute name\"}),(0,e.jsx)(a.p,{children:\"Since email will serve as the primary identifier, you also need to change the Name ID Format to email.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-name-id.png\",alt:\"an organization slug on settings\"}),(0,e.jsx)(a.p,{children:\"Finally, one last change: In SAML2, you can add an extra layer of security by requiring a client certificate when the Service Provider (Sentry) makes requests to the Identity Provider (Keycloak). However, since Sentry does not support this, make sure to disable that option.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-client-sig.png\",alt:\"disable requiring a client signature\"}),(0,e.jsxs)(a.h2,{id:\"set-up-sentry\",children:[(0,e.jsx)(a.a,{href:\"#set-up-sentry\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(a.span,{className:\"icon icon-link\"})}),\"Set Up Sentry\"]}),(0,e.jsx)(a.p,{children:\"Now you\\u2019re ready to register a custom SAML2 provider in Sentry. You can simply provide Sentry with the metadata URL, like the example below. Just remember to replace the master realm with your own:\"}),(0,e.jsx)(a.pre,{className:\"language-bash\",children:(0,e.jsx)(a.code,{className:\"language-bash code-highlight\",children:(0,e.jsx)(a.span,{className:\"code-line\",children:`https://keycloak.jayground8.com/realms/master/protocol/saml/descriptor\n`})})}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-register-idp.png\",alt:\"register a custom SAML2 provider\"}),(0,e.jsx)(a.p,{children:\"Do you remember the attribute name you configured in Keycloak? You need to enter the same attribute names in Sentry so it can correctly map them to user ID and email.\"}),(0,e.jsx)(\"img\",{src:\"/static/images/sentry-saml2-set-attributes.png\",alt:\"an organization slug on settings\"}),(0,e.jsx)(a.p,{children:\"If everything is configured correctly, Sentry will redirect you to Keycloak for authentication. Once authenticated, you should see that the SAML2 setup was successful in Sentry.\"}),(0,e.jsxs)(a.h2,{id:\"limitation-of-sentrys-saml2-authz\",children:[(0,e.jsx)(a.a,{href:\"#limitation-of-sentrys-saml2-authz\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(a.span,{className:\"icon icon-link\"})}),\"Limitation Of Sentry's SAML2 Authz\"]}),(0,e.jsx)(a.p,{children:\"Unfortunately, Sentry does not support mapping user roles through SAML attributes. It only allows you to set a default role for users when they are first registered via SAML2.\"}),(0,e.jsx)(a.p,{children:\"When I configured Vault, ArgoCD, Grafana, Gitea, and the Kubernetes API server with Keycloak, all of them supported assigning roles or permissions based on the Keycloak user\\u2019s group\\u2014by mapping the SAML groups attribute to their internal authorization system. I was hoping Sentry would offer a similar capability, instead of requiring user roles or team memberships to be set manually.\"}),(0,e.jsxs)(a.h2,{id:\"conclusion\",children:[(0,e.jsx)(a.a,{href:\"#conclusion\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(a.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),(0,e.jsx)(a.p,{children:\"I chose Keycloak to manage user authentication across all internal tools. Initially, I tried using Google Workspace groups with OIDC, but I ran into some limitations. Google\\u2019s OIDC implementation doesn\\u2019t include Google Workspace group claims by default. For example, to configure ArgoCD RBAC using Google groups, you need additional setup to allow ArgoCD\\u2019s Dex to retrieve group information after OIDC authentication.\"}),(0,e.jsx)(a.p,{children:\"Additionally, when configuring OIDC with the Kubernetes API server, you can\\u2019t bind roles directly to Google groups\\u2014unless you\\u2019re using GCP, which supports it natively. In contrast, Keycloak gives you full control over which claims are included in the token, making it much easier to implement group-based access control.\"}),(0,e.jsx)(a.p,{children:\"Keycloak also proved to be more flexible for managing users outside of Google Workspace, making it a better fit for our internal access control requirements.\"}),(0,e.jsx)(a.p,{children:\"This time, I integrated Sentry with Keycloak. There are several helpful blog posts available that make the process easy to follow. However, out of curiosity, I wanted to understand exactly what was happening behind the scenes\\u2014and clarify which steps are truly necessary.\"})]})}}var N=S;return b;})();\n;return Component;","toc":[{"value":"Set Up Keylocak","url":"#set-up-keylocak","depth":2},{"value":"Set Up Sentry","url":"#set-up-sentry","depth":2},{"value":"Limitation Of Sentry's SAML2 Authz","url":"#limitation-of-sentrys-saml2-authz","depth":2},{"value":"Conclusion","url":"#conclusion","depth":2}],"frontMatter":{"readingTime":{"text":"5 min read","minutes":4.185,"time":251100,"words":837},"slug":"20250722-sentry-saml2","fileName":"20250722-sentry-saml2.md","title":"Configuring Sentry's SAML2 Provider with Keycloak","date":"2025-07-22T00:00:00.000Z","tags":["sentry","keycloak","saml2"],"images":["/static/images/thumbnail/sentry-saml2-keycloak.png"],"summary":"This time, I integrated Sentry with Keycloak. There are several helpful blog posts available that make the process easy to follow. However, out of curiosity, I wanted to understand exactly what was happening behind the scenes—and clarify which steps are truly necessary."}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.15,"time":9000,"words":30},"slug":["default"],"fileName":"default.md","name":"Jay","avatar":"profile.png","occupation":"Software Engineer","date":null}],"prev":{"title":"Writing Helm Values With Gemini","date":"2025-07-19T00:00:00.000Z","tags":["kubernetes","heml","Gemini"],"images":["/static/images/thumbnail/writing-helm-values-with-gemini.png"],"summary":"I often write values.yaml files to install open-source projects on Kubernetes clusters. This time, I needed to add tolerations to ensure all components of Sentry would run on specific nodes. Since Sentry has quite a few components, I decided to leverage Gemini to generate the values.yaml file more quickly.","slug":"20250719-writing-helm-values-with-gemini"},"next":{"title":"Unexpected Trace Data Behavior in Google Cloud Trace with OpenTelemetry","date":"2025-07-24T00:00:00.000Z","tags":["opentelemetry","nodejs"],"images":["/static/images/thumbnail/trace-data.png"],"summary":"My system exports telemetry data from a Node.js application using OpenTelemetry. I configured the OpenTelemetry Collector to send that data to a GCP-managed service via the Google Cloud Exporter. Later, while reviewing database query information from the application, I noticed something odd in the trace data. As I dug deeper, I discovered some limitations of GCP Cloud Trace and how the mysql2 instrumentation package sets attribute values. That investigation helped explain the strange behavior I was seeing in the trace data.","slug":"20250724-nodejs-trace-database-data"}},"__N_SSG":true}