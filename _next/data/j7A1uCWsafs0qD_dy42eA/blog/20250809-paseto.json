{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var o=i=>s(i,\"__esModule\",{value:!0});var m=(i,a)=>()=>(a||i((a={exports:{}}).exports,a),a.exports),g=(i,a)=>{o(i);for(var n in a)s(i,n,{get:a[n],enumerable:!0})},y=(i,a,n)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let t of d(a))!u.call(i,t)&&t!==\"default\"&&s(i,t,{get:()=>a[t],enumerable:!(n=l(a,t))||n.enumerable});return i},f=i=>y(o(s(i!=null?h(p(i)):{},\"default\",i&&i.__esModule&&\"default\"in i?{get:()=>i.default,enumerable:!0}:{value:i,enumerable:!0})),i);var c=m((A,r)=>{r.exports=_jsx_runtime});var k={};g(k,{default:()=>w,frontmatter:()=>v});var e=f(c()),v={title:\"What is PASETO?\",date:\"2025-08-09\",tags:[\"paseto\",\"security\"],images:[\"/static/images/thumbnail/paseto.png\"],summary:\"I stumbled upon the PASETO specification. At first glance, it offers better security for a system. I researched it to figure out if it could bring any advantages to my system, which is built with Node.js and authenticates using bearer tokens.\"};function b(i={}){let{wrapper:a}=i.components||{};return a?(0,e.jsx)(a,Object.assign({},i,{children:(0,e.jsx)(n,{})})):n();function n(){let t=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",blockquote:\"blockquote\"},i.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(t.h2,{id:\"a-look-at-pasetos-features\",children:[(0,e.jsx)(t.a,{href:\"#a-look-at-pasetos-features\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"A Look at PASETO's Features\"]}),(0,e.jsx)(t.p,{children:\"I recently overheard a developer mention they had implemented PASETO (Platform-Agnostic Security Tokens) in their system, which sparked my curiosity. After doing some research, I discovered that PASETO is a modern specification designed to improve upon the well-known JOSE (JavaScript Object Signing and Encryption) standards, which include JWTs.\"}),(0,e.jsxs)(t.p,{children:[\"The creator of PASETO argues that the flexibility of the JOSE specification can lead developers to accidentally introduce security flaws. A prime example he cites on \",(0,e.jsx)(t.a,{href:\"https://www.youtube.com/watch?v=RijGNytjbOI\",children:\"this talk\"}),\" is \",(0,e.jsx)(t.a,{href:\"https://nvd.nist.gov/vuln/detail/CVE-2015-2964\",children:\"CVE-2015-2964\"}),\", where attackers could bypass signature verification by manipulating the alg (algorithm) header in a JWT.\"]}),(0,e.jsx)(t.p,{children:\"PASETO distinguishes itself from JOSE with a few key design choices that enhance security and clarity.\"}),(0,e.jsxs)(t.h3,{id:\"1-clear-and-unambiguous-purpose\",children:[(0,e.jsx)(t.a,{href:\"#1-clear-and-unambiguous-purpose\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"1. Clear and Unambiguous Purpose\"]}),(0,e.jsx)(t.p,{children:'PASETO eliminates confusion by offering only two distinct modes of operation, or \"purposes\":'}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:\"local: For when you need confidentiality. The token is encrypted symmetrically with a shared secret key.\"}),(0,e.jsx)(t.li,{children:\"public: For when you need authenticity. The token is signed asymmetrically with a private key and can be verified by anyone with the corresponding public key.\"})]}),(0,e.jsxs)(t.h3,{id:\"2-versioning-for-easy-upgrades\",children:[(0,e.jsx)(t.a,{href:\"#2-versioning-for-easy-upgrades\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"2. Versioning for Easy Upgrades\"]}),(0,e.jsx)(t.p,{children:\"PASETO uses a straightforward versioning system (v1, v2, v3, v4) that makes it simple to adopt stronger security standards over time. Each version has a static, hardcoded set of cryptographic algorithms that are considered best-in-class for their time.\"}),(0,e.jsxs)(t.p,{children:[\"For instance, \",(0,e.jsx)(t.a,{href:\"https://github.com/paseto-standard/paseto-spec/tree/master/docs/01-Protocol-Versions\",children:\"the official specification\"}),\" explicitly states which algorithm must be used for each version, leaving no room for ambiguity.\"]}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:\"v1: Sign m2 using RSA with the private key sk.\"}),(0,e.jsx)(t.li,{children:\"v2: Sign m2 using Ed25519 sk. We'll call this sig.\"}),(0,e.jsx)(t.li,{children:\"v3: Sign m2 using ECDSA over P-384 and SHA-384 with the private key sk.\"}),(0,e.jsx)(t.li,{children:\"v4: Sign m2 using Ed25519 sk. We'll call this sig.\"})]}),(0,e.jsxs)(t.h2,{id:\"is-paseto-practical-for-a-nodejs-project\",children:[(0,e.jsx)(t.a,{href:\"#is-paseto-practical-for-a-nodejs-project\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Is PASETO Practical for a Node.js Project?\"]}),(0,e.jsx)(t.p,{children:\"Now that I have a better understanding of PASETO, the next logical question is: would adopting it actually benefit my current system? Since I work primarily in the Node.js ecosystem, I decided to evaluate the available libraries from that specific perspective.\"}),(0,e.jsx)(t.p,{children:\"The official PASETO website lists two packages for Node.js.\"}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:(0,e.jsx)(t.a,{href:\"https://github.com/panva/paseto\",children:\"https://github.com/panva/paseto\"})}),(0,e.jsx)(t.li,{children:(0,e.jsx)(t.a,{href:\"https://github.com/auth70/paseto-ts\",children:\"https://github.com/auth70/paseto-ts\"})})]}),(0,e.jsx)(t.p,{children:\"My investigation into the first option, panva/paseto, quickly hit a roadblock. The GitHub repository is archived, meaning it is no longer actively maintained. The project's readme states:\"}),(0,e.jsx)(t.blockquote,{children:(0,e.jsx)(t.p,{children:\"This project is now archived. It may get revived when v5 and v6 protocol versions get released and their underlying crypto becomes readily available in Web Cryptography API implementations across JavaScript runtimes.\"})}),(0,e.jsx)(t.p,{children:\"The PASETO specification is simple and very clear. However, it raises an important question: is it the best choice to rely on a package that has been archived and hasn't had a new release since April 28, 2023?\"}),(0,e.jsx)(t.p,{children:\"So, I moved on to the second option, paseto-ts. This project starts to meet V4 specification. However, the project appears less mature when compared to panva/paseto. A quick look at its NPM statistics was revealing: it has just over 1,000 weekly downloads. For context, the archived panva/paseto package still has over 24,000 weekly downloads (jsonwebtoken package has over 21 million weekly downloads.)\"}),(0,e.jsx)(t.p,{children:\"In conclusion, the state of its Node.js ecosystem left me hesitant. The community support and library maturity don't seem to be on par with JOSE packages, which is a critical factor when choosing a security component for a production system.\"}),(0,e.jsxs)(t.h2,{id:\"what-about-applying-paseto-algorithm\",children:[(0,e.jsx)(t.a,{href:\"#what-about-applying-paseto-algorithm\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"What about applying PASETO algorithm?\"]}),(0,e.jsx)(t.p,{children:\"One of PASETO's main benefits is that it mandates the use of up-to-date, secure algorithms for encryption and signing. For example, the latest version, v4, uses Ed25519 for signing.\"}),(0,e.jsx)(t.p,{children:\"This led me to wonder: could I get the best of both worlds by using this modern algorithm within my existing JWT setup? \\u{1F914}\"}),(0,e.jsx)(t.p,{children:\"In my projects, I often use the NestJS framework with the official @nestjs/jwt module. This module, however, relies on the popular jsonwebtoken package internally. A look at the jsonwebtoken documentation shows it does not support Ed25519. It only provides ECDSA variants:\"}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:\"ECDSA using P-256 curve and SHA-256 hash algorithm\"}),(0,e.jsx)(t.li,{children:\"ECDSA using P-384 curve and SHA-384 hash algorithm\"}),(0,e.jsx)(t.li,{children:\"ECDSA using P-521 curve and SHA-512 hash algorithm\"})]}),(0,e.jsxs)(t.p,{children:[\"Well, one of benefit of PASETO is set to up to date secure algorithm for encypt and sign. The latest version v4 use Ed25519. I asked myself what about using this algorithm in JWT library. If you leverage nestjs framework and utilize \",(0,e.jsx)(t.a,{href:\"https://github.com/nestjs/jwt\",children:\"nest jwt module\"}),\", it utilize \",(0,e.jsx)(t.a,{href:\"https://github.com/auth0/node-jsonwebtoken\",children:\"jsonwebtoken package\"}),\" internally. jsonwebtoken package provide\"]}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:\"ECDSA using P-256 curve and SHA-256 hash algorithm\"}),(0,e.jsx)(t.li,{children:\"ECDSA using P-384 curve and SHA-384 hash algorithm\"}),(0,e.jsx)(t.li,{children:\"ECDSA using P-521 curve and SHA-512 hash algorithm\"})]}),(0,e.jsx)(t.p,{children:\"A comparison between Ed25519 and ECDSA reveals that Ed25519 has some advantages.\"}),(0,e.jsxs)(t.ul,{children:[(0,e.jsx)(t.li,{children:\"Better Performance \\u{1F680}: It offers faster signing and, most importantly, much faster signature verification.\"}),(0,e.jsx)(t.li,{children:\"Safer Implementation: It ensures a unique nonce is generated deterministically from the private key and message hash. ECDSA, in contrast, requires a high-quality source of randomness for its nonces; a mistake in this process can lead to a catastrophic leak of the private key.\"})]}),(0,e.jsxs)(t.p,{children:[\"Fortunately, another popular package for JOSE, \",(0,e.jsx)(t.a,{href:\"https://github.com/panva/jose\",children:\"pnva/jose\"}),\", allows you to use ed25519!\"]}),(0,e.jsxs)(t.h2,{id:\"conclusion\",children:[(0,e.jsx)(t.a,{href:\"#conclusion\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),(0,e.jsx)(t.p,{children:\"It was fascinating to learn about a new specification like PASETO and the problems it aims to solve. From the perspective of a developer who implements cryptographic standards, PASETO's simple and clear specification offers significant benefits.\"}),(0,e.jsx)(t.p,{children:\"However, as someone who just uses packages implemented by others, my priorities are different. I care more about whether a project is well-maintained and supported by a healthy community. From this standpoint, the PASETO ecosystem in Node.js is not yet as strong as the one for established JOSE libraries.\"}),(0,e.jsx)(t.p,{children:\"Furthermore, PASETO's public mode does not align with my use case. I mainly generate JWTs symmetrically for bearer tokens, and my system doesn't require other services to verify these tokens with a public key. PASETO's public mode only supports asymmetric signing.\"}),(0,e.jsx)(t.p,{children:\"For these reasons\\u2014the current maturity of the Node.js ecosystem and my specific technical requirements\\u2014I've decided to stick with my current JWT implementation for now.\"})]})}}var w=b;return k;})();\n;return Component;","toc":[{"value":"A Look at PASETO's Features","url":"#a-look-at-pasetos-features","depth":2},{"value":"1. Clear and Unambiguous Purpose","url":"#1-clear-and-unambiguous-purpose","depth":3},{"value":"2. Versioning for Easy Upgrades","url":"#2-versioning-for-easy-upgrades","depth":3},{"value":"Is PASETO Practical for a Node.js Project?","url":"#is-paseto-practical-for-a-nodejs-project","depth":2},{"value":"What about applying PASETO algorithm?","url":"#what-about-applying-paseto-algorithm","depth":2},{"value":"Conclusion","url":"#conclusion","depth":2}],"frontMatter":{"readingTime":{"text":"6 min read","minutes":5.025,"time":301500,"words":1005},"slug":"20250809-paseto","fileName":"20250809-paseto.md","title":"What is PASETO?","date":"2025-08-09T00:00:00.000Z","tags":["paseto","security"],"images":["/static/images/thumbnail/paseto.png"],"summary":"I stumbled upon the PASETO specification. At first glance, it offers better security for a system. I researched it to figure out if it could bring any advantages to my system, which is built with Node.js and authenticates using bearer tokens."}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.15,"time":9000,"words":30},"slug":["default"],"fileName":"default.md","name":"Jay","avatar":"profile.png","occupation":"Software Engineer","date":null}],"prev":{"title":"Adding OIDC Authentication to OpenVPN Community Server","date":"2025-07-26T00:00:00.000Z","tags":["openvpn","oauth2"],"images":["/static/images/thumbnail/openvpn.png"],"summary":"","slug":"20250726-openvpn-oidc"},"next":null},"__N_SSG":true}