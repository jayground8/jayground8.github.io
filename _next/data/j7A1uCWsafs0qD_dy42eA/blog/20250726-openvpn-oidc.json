{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var o=t=>i(t,\"__esModule\",{value:!0});var m=(t,a)=>()=>(a||t((a={exports:{}}).exports,a),a.exports),g=(t,a)=>{o(t);for(var s in a)i(t,s,{get:a[s],enumerable:!0})},k=(t,a,s)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let n of d(a))!u.call(t,n)&&n!==\"default\"&&i(t,n,{get:()=>a[n],enumerable:!(s=h(a,n))||s.enumerable});return t},N=t=>k(o(i(t!=null?l(p(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var c=m((O,r)=>{r.exports=_jsx_runtime});var w={};g(w,{default:()=>v,frontmatter:()=>y});var e=N(c()),y={title:\"Adding OIDC Authentication to OpenVPN Community Server\",date:\"2025-07-26\",tags:[\"openvpn\",\"oauth2\"],images:[\"/static/images/thumbnail/openvpn.png\"],summary:\"\"};function f(t={}){let{wrapper:a}=t.components||{};return a?(0,e.jsx)(a,Object.assign({},t,{children:(0,e.jsx)(s,{})})):s();function s(){let n=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",h3:\"h3\",ol:\"ol\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",br:\"br\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"When you have many internal tools that require login, managing users and roles individually across separate systems can become a real headache. Fortunately, there\\u2019s an excellent open-source project called Keycloak. I prefer to integrate all internal tools with Keycloak to centralize authentication and authorization management. That\\u2019s why I also wanted to integrate OpenVPN with Keycloak.\"}),(0,e.jsx)(n.p,{children:\"There are two main editions of OpenVPN: the open-source Community Edition, and the enterprise-grade OpenVPN Access Server. Naturally, the enterprise edition offers robust features and can significantly reduce the effort needed to run a secure VPN server. It likely includes built-in support for integrating with Keycloak, making it a convenient choice.\"}),(0,e.jsx)(n.p,{children:\"If you\\u2019re deploying a self-hosted VPN server in a corporate environment, the enterprise edition can be a smarter decision\\u2014it saves time, allowing you to focus on tasks that contribute directly to your business\\u2019s core value. However, if you don\\u2019t need any advanced features, running the Community Edition on your server is a perfectly reasonable option.\"}),(0,e.jsx)(n.p,{children:\"Setting up a self-hosted VPN and integrating it with Keycloak wasn\\u2019t an urgent or critical task for me. Out of curiosity, I began exploring whether the OpenVPN Community Edition could meet my requirements during my spare time. Honestly, if this had been a necessity at a company, I would have chosen the enterprise edition to save time and effort\\u2014well worth the cost.\"}),(0,e.jsxs)(n.h2,{id:\"authentication\",children:[(0,e.jsx)(n.a,{href:\"#authentication\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Authentication\"]}),(0,e.jsx)(n.p,{children:\"One of my requirements was to integrate Keycloak for authentication. Thanks to two great open-source projects, I was able to understand how OpenVPN can support authentication via the OAuth2 protocol:\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsxs)(n.li,{children:[\"An example using Go(\",(0,e.jsx)(n.a,{href:\"https://github.com/jkroepke/openvpn-auth-oauth2\",children:\"https://github.com/jkroepke/openvpn-auth-oauth2\"}),\")\"]}),(0,e.jsxs)(n.li,{children:[\"An example using Python(\",(0,e.jsx)(n.a,{href:\"https://github.com/thesparklabs/openvpn-okta-sso-example\",children:\"https://github.com/thesparklabs/openvpn-okta-sso-example\"}),\")\"]})]}),(0,e.jsx)(n.p,{children:\"Let me explain how this works. You should think of it in two parts: the client side and the server side.\"}),(0,e.jsx)(n.p,{children:\"On the client side, there\\u2019s OpenVPN Connect, which is the client application used to access the VPN server. When you try to connect to the OpenVPN server using OpenVPN Connect, the server requests that you authenticate via OAuth2 (in our case, through Keycloak). OpenVPN Connect then opens the Keycloak login page in your browser. You enter your Keycloak username and password, and upon successful login, you\\u2019re authenticated and the VPN connection is established.\"}),(0,e.jsxs)(n.h3,{id:\"a-more-detailed-step-by-step-explanation\",children:[(0,e.jsx)(n.a,{href:\"#a-more-detailed-step-by-step-explanation\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"A More Detailed Step-by-Step Explanation\"]}),(0,e.jsx)(n.p,{children:\"Here\\u2019s a more detailed breakdown of what happens:\"}),(0,e.jsx)(n.ol,{children:(0,e.jsx)(n.li,{children:\"OpenVPN Connect receives a message from the server that includes a URL for the login page. For example, the server might send:\"})}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight language-sh\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`client-pending-auth 1 1 WEB_AUTH::http://localhost:3000/login?state=16dd5a57b23e2d51 120\n`})})}),(0,e.jsxs)(n.ol,{start:\"2\",children:[(0,e.jsxs)(n.li,{children:[\"This tells OpenVPN Connect to open \",(0,e.jsx)(n.a,{href:\"http://localhost:3000/login\",children:\"http://localhost:3000/login\"}),\" in your browser.\"]}),(0,e.jsx)(n.li,{children:\"You can see this process in action by checking the OpenVPN Connect logs. It first logs an AUTH_PENDING event, followed by the WEB_AUTH event, which includes the URL that the browser should open.\"})]}),(0,e.jsx)(\"img\",{src:\"/static/images/openvpn-connect-log.png\",alt:\"openvpn connect logs\"}),(0,e.jsx)(n.ol,{start:\"4\",children:(0,e.jsx)(n.li,{children:\"Once you see the Keycloak login page in your browser, you enter your credentials. After a successful login, Keycloak redirects to a callback URL you configured in your Keycloak client using OIDC.\"})}),(0,e.jsx)(n.p,{children:\"Now you might ask: \\u201CCallback to where?\\u201D\"}),(0,e.jsx)(n.p,{children:\"Good question. This callback doesn\\u2019t go to the OpenVPN server directly. Instead, you need to run a separate server\\u2014let\\u2019s call it the Node.js server\\u2014to handle the callback from Keycloak. Later, I\\u2019ll share some Node.js code to make this clearer.\"}),(0,e.jsx)(n.p,{children:\"The Node.js server receives the callback from Keycloak, verifies the authentication result, and determines whether the user should be allowed to connect to the OpenVPN server.\"}),(0,e.jsx)(n.p,{children:\"At this point, you should understand that your system has two servers running:\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:\"The OpenVPN server\"}),(0,e.jsx)(n.li,{children:\"The Node.js server (handling the OAuth2 flow)\"})]}),(0,e.jsx)(n.p,{children:\"The client is trying to connect to the OpenVPN server, but the authentication result is handled by the Node.js server. So how do you let the OpenVPN server know that the user has been successfully authenticated?\"}),(0,e.jsx)(n.p,{children:\"This is where the OpenVPN Management Interface comes into play.\"}),(0,e.jsx)(n.p,{children:\"Once the Node.js server confirms that the user has successfully authenticated via OIDC, it uses the management interface to notify the OpenVPN server, which then allows the VPN connection to proceed. The Node.js server and the OpenVPN server exchange messages through this management interface using a simple protocol.\"}),(0,e.jsx)(n.blockquote,{children:(0,e.jsx)(n.p,{children:\"The OpenVPN Management interface allows OpenVPN to be administratively controlled from an external program via a TCP or unix domain socket.\"})}),(0,e.jsxs)(n.ol,{start:\"5\",children:[(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"The extra server(In our case, Nodejs application) handles the callback request from Keycloak and checks whether it is valid. It then sends a message to the OpenVPN server\\u2014either to allow or deny the client\\u2014via the management interface.\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"The OpenVPN server receives the message from the extra server and processes it accordingly.\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.p,{children:\"The client sees whether the connection has been successfully established or denied in the OpenVPN Connect client application.\"})})]}),(0,e.jsxs)(n.h3,{id:\"an-example-of-the-messages-exchanged-through-the-management-interface\",children:[(0,e.jsx)(n.a,{href:\"#an-example-of-the-messages-exchanged-through-the-management-interface\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"An example of the messages exchanged through the management interface.\"]}),(0,e.jsx)(n.p,{children:\"Let\\u2019s take a look at the messages exchanged between the Node.js server and the OpenVPN server during a newly established connection:\"}),(0,e.jsxs)(n.ol,{children:[(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.p,{children:[\"OpenVPN Server \\u2192 Node.js Server:\",(0,e.jsx)(n.br,{}),\"\\u201CHey Node.js! A client is trying to establish a new connection.\\u201D\",(0,e.jsx)(n.br,{}),(0,e.jsx)(n.code,{children:\">CLIENT:CONNECT,0,1\"}),\"\\\\\"]})}),(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.p,{children:[\"Node.js Server \\u2192 OpenVPN Server:\",(0,e.jsx)(n.br,{}),\"\\u201COh really? Could you ask the client to authenticate using this URL?\\u201D\",(0,e.jsx)(n.br,{}),(0,e.jsx)(n.code,{children:\"client-pending-auth 0 1 WEB_AUTH::http://localhost:3000/login?state=16dd5a57b23e2d51 120\"}),\"\\\\\"]})}),(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.p,{children:[\"Node.js Server \\u2192 OpenVPN Server:\",(0,e.jsx)(n.br,{}),\"\\u201CI received a valid callback request from Keycloak. The user is authenticated. You can proceed with the connection.\\u201D\",(0,e.jsx)(n.br,{}),(0,e.jsx)(n.code,{children:\"client-auth 0 1\"})]})}),(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.p,{children:[\"OpenVPN Server \\u2192 Node.js Server:\",(0,e.jsx)(n.br,{}),\"\\u201CThe connection has been successfully established. Thank you for your cooperation!\\u201D\",(0,e.jsx)(n.br,{}),(0,e.jsx)(n.code,{children:\">CLIENT:ESTABLISHED,0\"})]})})]}),(0,e.jsxs)(n.h2,{id:\"reauthentication\",children:[(0,e.jsx)(n.a,{href:\"#reauthentication\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Reauthentication\"]}),(0,e.jsxs)(n.p,{children:[\"Previously, we looked at how authentication works when establishing the initial connection. For \",(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/Forward_secrecy\",children:\"Forward Secrecy\"}),\", the OpenVPN server renegotiates the TLS session and encryption keys at regular intervals. By default, this renegotiation happens every 60 minutes.\"]}),(0,e.jsx)(n.p,{children:\"The two references I mentioned earlier take different approaches to handling reauthentication when OpenVPN is configured to authenticate via the management interface using OIDC:\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsxs)(n.li,{children:[\"An example using Go(\",(0,e.jsx)(n.a,{href:\"https://github.com/jkroepke/openvpn-auth-oauth2\",children:\"https://github.com/jkroepke/openvpn-auth-oauth2\"}),\")\"]}),(0,e.jsxs)(n.li,{children:[\"An example using Python(\",(0,e.jsx)(n.a,{href:\"https://github.com/thesparklabs/openvpn-okta-sso-example\",children:\"https://github.com/thesparklabs/openvpn-okta-sso-example\"}),\")\"]})]}),(0,e.jsxs)(n.h3,{id:\"approach-1-go-example\",children:[(0,e.jsx)(n.a,{href:\"#approach-1-go-example\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Approach 1: Go Example\"]}),(0,e.jsxs)(n.p,{children:[\"The Go example takes a simple approach. OpenVPN controls how often renegotiation occurs using the \",(0,e.jsx)(n.code,{children:\"reneg-sec\"}),\" option, which can be configured on both the client and server sides. The server pushes a configuration to the client to disable renegotiation entirely by setting \",(0,e.jsx)(n.code,{children:\"reneg-sec\"}),\" to 0:\"]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.code,{children:\"server.conf\"})}),(0,e.jsx)(n.pre,{className:\"language-bash\",children:(0,e.jsx)(n.code,{className:\"code-highlight language-bash\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"push \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"reneg-sec 0\"'}),`\n`]})})}),(0,e.jsx)(n.p,{children:\"This prevents reauthentication from happening during an active session.\"}),(0,e.jsxs)(n.h3,{id:\"approach-2-python-example\",children:[(0,e.jsx)(n.a,{href:\"#approach-2-python-example\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Approach 2: Python Example\"]}),(0,e.jsx)(n.p,{children:\"The Python example allows renegotiation but uses additional configuration.\"}),(0,e.jsx)(n.p,{children:\"To understand this better, consider the following scenario:\"}),(0,e.jsx)(n.p,{children:\"Suppose you\\u2019ve configured two-factor authentication (2FA) for accessing your OpenVPN server. During the initial connection, users provide both their username/password and a TOTP code. After one hour, OpenVPN initiates a session renegotiation. However, you don\\u2019t want users to re-enter all their credentials just to maintain the connection.\"}),(0,e.jsx)(n.p,{children:\"In this case, you can use authentication tokens. By enabling the auth-gen-token option on the OpenVPN server, it generates an authentication token after the initial connection is established and pushes it to the client (OpenVPN Connect). The client stores this token and reuses it during renegotiation. If the server accepts the token, the session continues without prompting the user to re-enter credentials.\"}),(0,e.jsx)(n.p,{children:\"However, in this specific case, the authentication token isn\\u2019t validated in the usual way\\u2014because authentication is done via OIDC, not username/password. When auth-user-pass-verify is used and a user logs in with a valid username and password, OpenVPN generates a token bound to that username. In the OIDC-based flow, auth-user-pass-optional is set, and the username is left empty. Therefore, authentication token validation fails.\"}),(0,e.jsx)(n.p,{children:\"That\\u2019s why the second example configures auth-gen-token with external-auth. The external-auth option allows an external server (in our case, the Node.js server) to decide whether to allow or deny reauthentication during session renegotiation.\"}),(0,e.jsx)(n.pre,{className:\"language-bash\",children:(0,e.jsx)(n.code,{className:\"code-highlight language-bash\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"auth-gen-token \",(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),` external-auth\n`]})})}),(0,e.jsx)(n.p,{children:\"In our case, even though the authentication token fails validation due to an empty username, the external server still receives a REAUTH event through the OpenVPN management interface:\"}),(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`>CLIENT:REAUTH,1,3\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`>CLIENT:ENV,session_id=QRGqJyAu801FWKZx\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`>CLIENT:ENV,session_status=AuthenticatedEmptyUser\n`})]})}),(0,e.jsxs)(n.p,{children:[\"Pay close attention to the session_status value. When it is set to AuthenticatedEmptyUser, it indicates that the server attempted to validate the token but failed because the username was empty. \",(0,e.jsx)(n.a,{href:\"https://github.com/OpenVPN/openvpn/blob/7d5ec053f0f30c6cd27b60ed76859a09f6dbf5e4/doc/man-sections/server-options.rst#L51\",children:\"According to the OpenVPN documentation\"}),\":\"]}),(0,e.jsx)(n.blockquote,{children:(0,e.jsx)(n.p,{children:\"AuthenticatedEmptyUser / ExpiredEmptyUser: The token is not valid with the username sent from the client but would be valid (or expired) if we assume an empty username was used instead. These two cases are a workaround for behaviour in OpenVPN 3. If this workaround is not needed these two cases should be handled in the same way as Invalid.\"})}),(0,e.jsx)(n.p,{children:\"In the second example, the session_id is stored during the initial connection and later validated by simply comparing it to the session_id provided during renegotiation. It also checks whether the session_state is AuthenticatedEmptyUser.\"}),(0,e.jsx)(n.pre,{className:\"language-python\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-python\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"def\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"clientReauth\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" cid\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" kid\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"not\"}),\" cid \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"in\"}),\" self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"sessions \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"or\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"not\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"SessionID\"'}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"in\"}),\" self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"sessions\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"cid\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"or\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"not\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"session_id\"'}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"in\"}),\" self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"clientData\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"sessions\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"cid\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"SessionID\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"!=\"}),\" self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"clientData\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"session_id\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"# OpenVPN does not allow auth-gen-token without a username by default, so we allow it here\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"clientData\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"session_state\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"in\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"Authenticated\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"AuthenticatedEmptyUser\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        reply \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"client-auth-nt %s %s\\\\n\"'}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"%\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"cid\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" kid\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        self\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"conn\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"write\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"reply\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"encode\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),`\n`]})]})}),(0,e.jsxs)(n.h2,{id:\"authorization\",children:[(0,e.jsx)(n.a,{href:\"#authorization\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Authorization\"]})]})}}var v=f;return w;})();\n;return Component;","toc":[{"value":"Authentication","url":"#authentication","depth":2},{"value":"A More Detailed Step-by-Step Explanation","url":"#a-more-detailed-step-by-step-explanation","depth":3},{"value":"An example of the messages exchanged through the management interface.","url":"#an-example-of-the-messages-exchanged-through-the-management-interface","depth":3},{"value":"Reauthentication","url":"#reauthentication","depth":2},{"value":"Approach 1: Go Example","url":"#approach-1-go-example","depth":3},{"value":"Approach 2: Python Example","url":"#approach-2-python-example","depth":3},{"value":"Authorization","url":"#authorization","depth":2}],"frontMatter":{"readingTime":{"text":"8 min read","minutes":7.495,"time":449700,"words":1499},"slug":"20250726-openvpn-oidc","fileName":"20250726-openvpn-oidc.md","title":"Adding OIDC Authentication to OpenVPN Community Server","date":"2025-07-26T00:00:00.000Z","tags":["openvpn","oauth2"],"images":["/static/images/thumbnail/openvpn.png"],"summary":""}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.15,"time":9000,"words":30},"slug":["default"],"fileName":"default.md","name":"Jay","avatar":"profile.png","occupation":"Software Engineer","date":null}],"prev":{"title":"Unexpected Trace Data Behavior in Google Cloud Trace with OpenTelemetry","date":"2025-07-24T00:00:00.000Z","tags":["opentelemetry","nodejs"],"images":["/static/images/thumbnail/trace-data.png"],"summary":"My system exports telemetry data from a Node.js application using OpenTelemetry. I configured the OpenTelemetry Collector to send that data to a GCP-managed service via the Google Cloud Exporter. Later, while reviewing database query information from the application, I noticed something odd in the trace data. As I dug deeper, I discovered some limitations of GCP Cloud Trace and how the mysql2 instrumentation package sets attribute values. That investigation helped explain the strange behavior I was seeing in the trace data.","slug":"20250724-nodejs-trace-database-data"},"next":{"title":"What is PASETO?","date":"2025-08-09T00:00:00.000Z","tags":["paseto","security"],"images":["/static/images/thumbnail/paseto.png"],"summary":"I stumbled upon the PASETO specification. At first glance, it offers better security for a system. I researched it to figure out if it could bring any advantages to my system, which is built with Node.js and authenticates using bearer tokens.","slug":"20250809-paseto"}},"__N_SSG":true}