
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>Jayground8</title>
      <link>https://jayground8.github.io/blog</link>
      <description>like playing in the playground</description>
      <language>kr</language>
      <managingEditor>jayground8@gmail.com (Jay)</managingEditor>
      <webMaster>jayground8@gmail.com (Jay)</webMaster>
      <lastBuildDate>Sat, 13 Jul 2024 00:00:00 GMT</lastBuildDate>
      <atom:link href="https://jayground8.github.io/tags/devsecops/feed.xml" rel="self" type="application/rss+xml"/>
      
  <item>
    <guid>https://jayground8.github.io/blog/20240713-add-package-to-distroless-image</guid>
    <title>Distroless Image에 Package 추가하기</title>
    <link>https://jayground8.github.io/blog/20240713-add-package-to-distroless-image</link>
    <description>컨테이너 이미지에 최소한으로 필요한 software만 포함하는 것이 보안적으로 모범사례이다. 이러한 모범사례를 따르는 가장 쉽고 합리적인 방법은 구글에서 제공하는 Distroless Image를 활용하는 것이다. Distroless Image는 nonroot, debug, debug-nonroot Tag를 가지고 있다. nonroot은 conatiner에게 root 권한을 주지않고, shell도 없어서 Terminal로 접속이 불가능하다. 그런데 Distroless Image에 추가로 필요한 debian package를 설치하면 어떻게 해야할까? 이번 글에서는 bazel로 빌드할 때 원하는 debian package를 추가하는 방법을 알아 본다.</description>
    <pubDate>Sat, 13 Jul 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>kubernetes</category><category>distroless</category><category>devsecops</category>
  </item>

  <item>
    <guid>https://jayground8.github.io/blog/20240713-vault-audit</guid>
    <title>Vault Audit Log를 남기기</title>
    <link>https://jayground8.github.io/blog/20240713-vault-audit</link>
    <description>Vault에서 다양한 credentials를 보관하게 된다. 따라서 어떤 접근들이 있었는지 Audit Log들을 남겨서 관리하고 싶었다. Vault에서 Audit Device 기능을 제공하여서 file, syslog, socket등으로 Vault API 요청과 응답을 로그로 남길 수 있다. socket은 log 손실의 위험이 있고, syslog는 Vault Pod에서 추가적인 package설치와 설정이 필요하다. 따라서 Kubernetes에서 Vault를 운영하는 과정에서 file 방식으로 Audit log를 남겨보았다.</description>
    <pubDate>Sat, 13 Jul 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>vault</category><category>devsecops</category>
  </item>

  <item>
    <guid>https://jayground8.github.io/blog/20240615-modsecurity</guid>
    <title>ModSecurity를 Nginx Ingress Controller에 연동하여 WAF 설정하기</title>
    <link>https://jayground8.github.io/blog/20240615-modsecurity</link>
    <description>ModSecurity는 오픈소스로 제공하는 WAF이다. Nginx connector를 통해서 ModSecurity를 Nginx에 쉽게 연동할 수 있다. Nginx Ingress Controller에서는 해당 설정을 할 수 있도록 Configmap에 설정 옵션들을 제공한다. 해당 옵션들을 설정함으로서 쉽게 Nginx에 WAF를 구현할 수 있다. ModSecurity는 Trustware라는 회사가 관리하다가 2024년 1월에 OWASP foundation으로 넘어가게 되었다. ModSecurity는 오래된 프로젝트이고, Production Ready라고 소개되고 있다. 하지만 ModSecurity가 앞으로도 계속 커뮤니티를 통해서 활발히 관리될지는 지켜봐야겠다.</description>
    <pubDate>Sat, 15 Jun 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>kubernetes</category><category>nginx</category><category>modsecurity</category><category>devsecops</category>
  </item>

  <item>
    <guid>https://jayground8.github.io/blog/20240519-zap</guid>
    <title>ZAP을 사용하여 동적 검사 해보기</title>
    <link>https://jayground8.github.io/blog/20240519-zap</link>
    <description>Google Oauth2를 프로덕션 단계로 사용할 때, Gmail 권한을 사용하려면 CASA(클라우드 어플리케이션 보안 평가)를 수행해야 한다. 관련 문서에서 동적 검사를 할 때,ZAP을 활용하는 방법을 설명하고 있다. 따라서 기본적인 ZAP 사용법을 확인하였다. Docker Container로 Sciprt를 실행하여 API 스캐닝을 해봤고, Automation Framework와 ZAP Desktop Application을 활용하여 React Router에 의해서 이동되는 페이지들을 크롤링하는 것을 테스트해봤다.</description>
    <pubDate>Sun, 19 May 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>devsecops</category><category>zap</category>
  </item>

  <item>
    <guid>https://jayground8.github.io/blog/20240505-falco</guid>
    <title>Falco를 활용하여 Terminal Shell 명령어 로그 수집하기</title>
    <link>https://jayground8.github.io/blog/20240505-falco</link>
    <description>Kubernetes Worker Node와 Pod Container에 Terminal shell로 접근하여 명령어를 입력하면 로그를 남기고, 경우에 따라서 알림을 보내고 싶었다. CNCF 졸업한 Project인 Falco를 활용하면 이를 구현할 수 있지 않을까 하여 테스트를 해보게 되었다. Falco는 kernel module이나 eBPF probe등을 통해서 kernel event를 저장하고, 설정된 rule에 따라서 해당 event를 filter하여 원하는 output 형태로 저장한다. Falco는 모든 로그를 저장하기보다는 Rule에 따라 선택적으로 보안 위협이 있는 이벤트를 수집하고 실시간으로 알림하는 것이 목적이다. 따라서 Falco를 통해서 원하던 기능을 구현하는 것은 합리적인 방법이 아닌 것으로 판단 된다.</description>
    <pubDate>Sun, 05 May 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>kubernetes</category><category>falco</category><category>devsecops</category>
  </item>

  <item>
    <guid>https://jayground8.github.io/blog/20240501-opentelemetry-syslog</guid>
    <title>OpenTelmetry로 auth.log와 syslog 수집하기</title>
    <link>https://jayground8.github.io/blog/20240501-opentelemetry-syslog</link>
    <description>Ubuntu 20.04 서버의 auth.log, syslog 로그 값들을 OpenTelemetry를 통해서 수집하고 싶었다. 처음에는 Filelog Receiver를 통해서 수집하려고 하였고, rsyslog의 설정값을 변경하여 Filelog로 수집하도록 구성했다. 그런데 이후에 Syslog Receiver가 존재하는 것을 확인하게 되었고, 훨씬 간단하게 syslog를 수집할 수 있었다.</description>
    <pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>kubernetes</category><category>opentelemetry</category><category>devsecops</category>
  </item>

  <item>
    <guid>https://jayground8.github.io/blog/20240208-tekton-chain</guid>
    <title>Tekton Chain</title>
    <link>https://jayground8.github.io/blog/20240208-tekton-chain</link>
    <description>Kubernetes에서 Tekton Chain을 통해서 어떻게 Software Supply Chain Security를 구성할 수 있는지 확인했다. Tekton Pipeline으로 git clone을 하고, container image를 build하고, 최종적으로 OCI registry에 push하도록 구성했다. 그리고 Tekton Chain이 어떻게 in-toto spec의 Attestation 정보를 남기는지 확인하였다.</description>
    <pubDate>Sun, 11 Feb 2024 00:00:00 GMT</pubDate>
    <author>jayground8@gmail.com (Jay)</author>
    <category>kubernetes</category><category>tekton</category><category>devsecops</category>
  </item>

    </channel>
  </rss>
